name: 'CD CD Magic Movies APIs'

on:
  push:
    branches:
      - dev
      - stage
      - main

env:
  REGION: 'europe-west1'
  DOCKER_IMAGE_FOLDER: 'docker'
  SA_ACC_PREFIX: 'api-services'
  PROJECT_ID_PREFIX: 'magic-movies'
  CPU: '1'
  MEMORY: '512Mi'
  MIN_INSTANCE: '1'
  MAX_INSTANCE: '2'

jobs:
  init:
    name: Initialisor
    runs-on: ubuntu-latest
    outputs:
      env: ${{ steps.setvars.outputs.env}}
      project-number: ${{ steps.setvars.outputs.project-number}}
      project-id: ${{ steps.setvars.outputs.project-id}}
    steps:
      - id: setVars
        name: Initialise variables
        run: |
          if [[ "${{ github.base_ref }}" == "dev" || "${{ github.ref }}" == "refs/heads/dev" ]]; then
            echo "env=dev" >> $GITHUB_OUTPUT
            echo "project-id=magic-movies" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ github.base_ref }}" == "stage" || "${{ github.ref }}" == "refs/heads/stage" ]]; then
            echo "env=stage" >> $GITHUB_OUTPUT
            echo "project-id=magic-movies" >> $GITHUB_OUTPUT
          fi
          if [[ "${{ github.base_ref }}" == "main" || "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "env=main" >> $GITHUB_OUTPUT
            echo "project-id=magic-movies" >> $GITHUB_OUTPUT
          fi

  build:
    name: Docker build and Push Images
    needs: init
    runs-on: ubuntu-latest
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
      matrix:
        include:
          - service_name: 'main-api'

    steps:
      - uses: actions/checkout@v4
      - name: Set build env variables
        run: |
          echo "ARTIFACT_REPOSITORY=$REGION-docker.pkg.${{ needs.init.outputs.env }}/${{ needs.init.outputs.project-id }}-${{ needs.init.outputs.env }}/magic-movie-services" >> $GITHUB_ENV
          echo "BUILD_IMAGE_NAME=${{ matrix.service_name }}-${{ needs.init.outputs.env }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ matrix.service_name }}-${{ needs.init.outputs.env }}:latest" >> $GITHUB_ENV

      - uses: 'google-github-actions/auth@v2'
        id: 'auth'
        name: 'Authenticate to Google Cloud'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/${{ secrets.PROJECT_NUMBER_DEV }}/locations/global/workloadIdentityPools/gh-gcp-oidc-pool/providers/gh-gcp-oidc-provider'
          service_account: 'api-services-${{ needs.init.outputs.env }}@${{ needs.init.outputs.project-id }}-${{ needs.init.outputs.env }}.iam.gserviceaccount.com'

      - name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0

      - name: Configure docker for GCP
        run: gcloud auth configure-docker

      - name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
        with:
          install: true
          version: v0.9.1

      - name: Cache Docker layers
        uses: actions/cache@v3
        with:
          path: /tmp/.buildx-cache
          key: ${{ runner.os }}-buildx-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-buildx-

      - name: Login to GAR
        uses: docker/login-action@v2
        with:
          registry: ${{ env.REGION }}-docker.pkg.dev
          username: oauth2accesstoken
          password: ${{ steps.auth.outputs.access_token }}

      - name: Build and Push Docker image
        id: docker_build
        uses: docker/build-push-action@v3
        with:
          context: '.'
          #file: './${{ env.DOCKER_IMAGE_FOLDER }}/${{ matrix.service_name }}/${{ matrix.service_name }}.dockerfile'
          file: ./Dockerfile
          tags: ${{ env.ARTIFACT_REPOSITORY }}/${{ env.BUILD_IMAGE_NAME }},${{ env.ARTIFACT_REPOSITORY }}/${{ env.IMAGE_NAME }}
          push: true
          cache-from: type=gha, scope=${{ github.workflow }}
          cache-to: type=gha, scope=${{ github.workflow }}

  deploy:
    name: Cloud Deployment
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: 'read'
      id-token: 'write'
    strategy:
      matrix:
        include:
          - service_name: main-api
            sql_instance: test-movies:europe-west1:magic-movies-db
    steps:
      - uses: actions/checkout@v3
      - name: Set deploy env variables
        run: |
          echo "ARTIFACT_REPOSITORY=$REGION-docker.pkg.${{ needs.init.outputs.env }}/${{ needs.init.outputs.project-id }}-${{ needs.init.outputs.env }}/magic-movie-services" >> $GITHUB_ENV
          echo "BUILD_IMAGE_NAME=${{ matrix.service_name }}-${{ needs.init.outputs.env }}" >> $GITHUB_ENV
          echo "IMAGE_NAME=${{ matrix.service_name }}-${{ needs.init.outputs.env }}:latest" >> $GITHUB_ENV

      - id: 'auth'
        name: 'Authenticate to Google Cloud'
        uses: 'google-github-actions/auth@v0'
        with:
          token_format: 'access_token'
          workload_identity_provider: 'projects/${{ secrets.PROJECT_NUMBER_DEV }}/locations/global/workloadIdentityPools/gh-gcp-oidc-pool/providers/gh-gcp-oidc-provider'
          service_account: 'tm-tr-wld-cloud-deploy-${{ needs.init.outputs.env }}@${{ needs.init.outputs.project-id }}-${{ needs.init.outputs.env }}.iam.gserviceaccount.com'

      - id: 'gcloud-setup'
        name: Setup gcloud
        uses: google-github-actions/setup-gcloud@v0

      - name: 'Deploy to Cloud Run'
        id: deploy
        uses: 'google-github-actions/deploy-cloudrun@v1'
        with:
          service: ${{ matrix.service_name }}-${{ needs.init.outputs.env }}
          image: ${{ env.ARTIFACT_REPOSITORY }}/${{ env.IMAGE_NAME }}
          region: ${{ env.REGION }}
          flags: >
            --project ${{ needs.init.outputs.project-id }}-${{ needs.init.outputs.env }} 
            --cpu ${{ env.CPU }} 
            --memory ${{ env.MEMORY }} 
            --min-instances ${{ env.MIN_INSTANCE }} 
            --max-instances ${{ env.MAX_INSTANCE }} 
            --platform managed 
            --region ${{ env.REGION }} 
            --service-account ${{ env.SERVICE_ACCOUNT_PREFIX }}-${{ needs.init.outputs.env }}@${{ needs.init.outputs.project-id }}-${{ needs.init.outputs.env }}.iam.gserviceaccount.com
            --add-cloudsql-instances ${{ matrix.sql_instance }}
            --env-vars-file ./cloud-config/${{ needs.init.outputs.env }}.yaml 
            --no-allow-unauthenticated
